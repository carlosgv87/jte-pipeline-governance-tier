def app_metadata = [:]
def country_env_data = null
def env_data = get_environment_data(isPR() ? env.CHANGE_TARGET : env.BRANCH_NAME)
def repository_data = null

def pipeline_steps = { app_data ->
    isPR() ? {
        stage('Sanity checks Diff') {
            steps {
                //script {
                    log.debug("[DIFF] Sanity checks - START")
                    nexus_sanity_check("PR", "microservice", app_data, repository_data)
                    log.debug("[DIFF] Sanity checks - END")
                //}
            }
        }

        def output = stage('Diff') {
            steps {
                //script {
                    diff(country_env_data.k8s_credentials_id,
                            country_env_data.short_name,
                            country_env_data.microservice_helm_chart,
                            country_env_data.helm_global_values,
                            app_data.name)
                //}
            }
        }

        stage('Report') {
            steps {
                //script {
                    reportDiff(repository_data, output)
                //}
            }
        }
    } : {
        stage('Sanity checks Deploy') {
            steps {
                //script {
                    log.debug("[DEPLOY] Sanity checks - START")
                    nexus_sanity_check("DEPLOYMENT", "microservice", app_data, repository_data)
                    log.debug("[DEPLOY] Sanity checks - END")
                //}
            }
        }

        stage('Deploy') {
            steps {
                //script {
                    log.debug("Deploy")
                    deploy_to(country_env_data.k8s_credentials_id,
                            country_env_data.short_name,
                            country_env_data.microservice_helm_chart,
                            country_env_data.helm_global_values,
                            app_data.name)
                //}
            }
        }
    }
}

pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                script {
                    def scm_data = checkout scm
                    repository_data = get_repository_data(scm_data)
                }
            }
        }

        stage('Retrieving info') {
            steps {
                script {
                    def country_code = repository_data.country_code
                    log.info("country_code: ${country_code}")
                    country_env_data = env_data.country[country_code]
                    log.debug("country_env_data: ${country_env_data}")
                    app_metadata = get_app_data(country_env_data)
                    log.debug("app_metadata: ${app_metadata}")
                    log.debug("isPR: ${isPR()}")
                }
            }
        }

        //stage('EXEC'){
        //    steps {
        //        script {
                    try {
                        pipeline_steps(app_metadata)()
                    } catch (e) {
                        throw e
                    } finally {
                        milestone()
                        log.info("NOTIFICATION")
                        //notify(country_env_data, app_metadata, tm('${BUILD_FAILURE_ANALYZER, includeTitle=false, includeIndications=false, useHtmlFormat=false}'))
                    }
        //        }
        //    }
        //}
    }
}